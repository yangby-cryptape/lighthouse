/* automatically generated by rust-bindgen 0.63.0 */

#[doc = " \\brief          SHA-256 context structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_sha256_context {
    #[doc = "< number of bytes processed"]
    pub total: [u32; 2usize],
    #[doc = "< intermediate digest state"]
    pub state: [u32; 8usize],
    #[doc = "< data block being processed"]
    pub buffer: [::core::ffi::c_uchar; 64usize],
    #[doc = "< 0 => SHA-256, else SHA-224"]
    pub is224: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_mbedtls_sha256_context() {
    const UNINIT: ::core::mem::MaybeUninit<mbedtls_sha256_context> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<mbedtls_sha256_context>(),
        108usize,
        concat!("Size of: ", stringify!(mbedtls_sha256_context))
    );
    assert_eq!(
        ::core::mem::align_of::<mbedtls_sha256_context>(),
        4usize,
        concat!("Alignment of ", stringify!(mbedtls_sha256_context))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_sha256_context),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_sha256_context),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_sha256_context),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).is224) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mbedtls_sha256_context),
            "::",
            stringify!(is224)
        )
    );
}
extern "C" {
    #[doc = " \\brief          Initialize SHA-256 context\n\n \\param ctx      SHA-256 context to be initialized"]
    pub fn mbedtls_sha256_init(ctx: *mut mbedtls_sha256_context);
}
extern "C" {
    #[doc = " \\brief          Clear SHA-256 context\n\n \\param ctx      SHA-256 context to be cleared"]
    pub fn mbedtls_sha256_free(ctx: *mut mbedtls_sha256_context);
}
extern "C" {
    #[doc = " \\brief          SHA-256 context setup\n\n \\param ctx      context to be initialized\n \\param is224    0 = use SHA256, 1 = use SHA224"]
    pub fn mbedtls_sha256_starts(ctx: *mut mbedtls_sha256_context, is224: ::core::ffi::c_int);
}
extern "C" {
    #[doc = " \\brief          SHA-256 process buffer\n\n \\param ctx      SHA-256 context\n \\param input    buffer holding the  data\n \\param ilen     length of the input data"]
    pub fn mbedtls_sha256_update(
        ctx: *mut mbedtls_sha256_context,
        input: *const ::core::ffi::c_uchar,
        ilen: usize,
    );
}
extern "C" {
    #[doc = " \\brief          SHA-256 final digest\n\n \\param ctx      SHA-256 context\n \\param output   SHA-224/256 checksum result"]
    pub fn mbedtls_sha256_finish(
        ctx: *mut mbedtls_sha256_context,
        output: *mut ::core::ffi::c_uchar,
    );
}
